import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ChevronRight, ChevronDown, File, Folder, FolderOpen } from "lucide-react";

export default function FileSystemTree({ fileSystem, visitedNodes, currentNode, isRunning }) {
  const [expandedNodes, setExpandedNodes] = useState(new Set(['root']));

  const toggleNode = (nodeId) => {
    setExpandedNodes(prev => {
      const newSet = new Set(prev);
      if (newSet.has(nodeId)) {
        newSet.delete(nodeId);
      } else {
        newSet.add(nodeId);
      }
      return newSet;
    });
  };

  const renderNode = (node, depth = 0) => {
    const isExpanded = expandedNodes.has(node.id);
    const isVisited = visitedNodes.has(node.id);
    const isCurrent = currentNode?.id === node.id;
    const hasChildren = node.children && node.children.length > 0;

    return (
      <motion.div
        key={node.id}
        initial={{ opacity: 0, x: -20 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ delay: depth * 0.1 }}
      >
        <div
          className={`flex items-center gap-2 py-2 px-3 rounded-lg cursor-pointer transition-all duration-300 ${
            isCurrent 
              ? 'bg-amber-100 border-2 border-amber-300 premium-shadow' 
              : isVisited 
                ? 'bg-emerald-50 border border-emerald-200' 
                : 'hover:bg-gray-50'
          }`}
          style={{ marginLeft: `${depth * 20}px` }}
          onClick={() => hasChildren && toggleNode(node.id)}
        >
          {hasChildren && (
            <motion.div
              animate={{ rotate: isExpanded ? 90 : 0 }}
              transition={{ duration: 0.2 }}
            >
              <ChevronRight className="w-4 h-4 text-gray-500" />
            </motion.div>
          )}
          
          {!hasChildren && <div className="w-4" />}
          
          <div className="flex items-center gap-2">
            {node.type === 'folder' ? (
              isExpanded ? (
                <FolderOpen className="w-5 h-5 text-emerald-600" />
              ) : (
                <Folder className="w-5 h-5 text-emerald-600" />
              )
            ) : (
              <File className="w-5 h-5 text-blue-600" />
            )}
            
            <span className={`font-medium ${isCurrent ? 'text-amber-800' : isVisited ? 'text-emerald-800' : 'text-gray-700'}`}>
              {node.name}
            </span>
          </div>

          <div className="ml-auto flex items-center gap-2">
            {node.size && (
              <Badge variant="outline" className="text-xs">
                {(node.size / 1024).toFixed(1)}KB
              </Badge>
            )}
            
            {isVisited && (
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                className="w-2 h-2 bg-emerald-500 rounded-full"
              />
            )}
            
            {isCurrent && (
              <motion.div
                animate={{ scale: [1, 1.2, 1] }}
                transition={{ repeat: Infinity, duration: 1 }}
                className="w-3 h-3 bg-amber-500 rounded-full"
              />
            )}
          </div>
        </div>

        <AnimatePresence>
          {isExpanded && hasChildren && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
            >
              {node.children.map(child => renderNode(child, depth + 1))}
            </motion.div>
          )}
        </AnimatePresence>
      </motion.div>
    );
  };

  return (
    <Card className="glass-effect premium-shadow">
      <CardHeader className="border-b border-gray-100">
        <CardTitle className="flex items-center gap-2 text-xl">
          <FolderOpen className="w-6 h-6 text-emerald-600" />
          File System Tree
          {isRunning && (
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ repeat: Infinity, duration: 2, ease: "linear" }}
              className="w-4 h-4 border-2 border-emerald-500 border-t-transparent rounded-full"
            />
          )}
        </CardTitle>
      </CardHeader>
      <CardContent className="p-4">
        <div className="space-y-1 max-h-96 overflow-y-auto">
          {renderNode(fileSystem)}
        </div>
        
        <div className="mt-4 p-3 bg-gray-50 rounded-lg">
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-emerald-500 rounded-full" />
                <span className="text-gray-600">Visited</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-amber-500 rounded-full" />
                <span className="text-gray-600">Current</span>
              </div>
            </div>
            <Badge variant="outline">
              {visitedNodes.size} nodes visited
            </Badge>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
